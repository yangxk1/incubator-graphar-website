"use strict";(self.webpackChunkapache_website_template=self.webpackChunkapache_website_template||[]).push([[9125],{2207:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=t(1527),r=t(395);const s={},o="Convert SNAP Datasets to GraphAr Format",i={id:"libraries/cpp/examples/snap-to-graphar",title:"Convert SNAP Datasets to GraphAr Format",description:"SNAP (Stanford Network Analysis",source:"@site/docs/libraries/cpp/examples/snap-to-graphar.md",sourceDirName:"libraries/cpp/examples",slug:"/libraries/cpp/examples/snap-to-graphar",permalink:"/docs/libraries/cpp/examples/snap-to-graphar",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/incubator-graphar/edit/main/docs/libraries/cpp/examples/snap-to-graphar.md",tags:[],version:"current",frontMatter:{},sidebar:"documentation",previous:{title:"Out-of-core Graph Algorithms",permalink:"/docs/libraries/cpp/examples/out-of-core"},next:{title:"Java Library",permalink:"/docs/libraries/java/"}},p={},d=[{value:"Prepare the SNAP Dataset",id:"prepare-the-snap-dataset",level:2},{value:"Convert the SNAP Dataset to GraphAr Format",id:"convert-the-snap-dataset-to-graphar-format",level:2}];function h(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"convert-snap-datasets-to-graphar-format",children:"Convert SNAP Datasets to GraphAr Format"}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.a,{href:"https://snap.stanford.edu/data/",children:"SNAP"})," (Stanford Network Analysis\nProject) is a general-purpose network analysis and graph mining library.\nIt provides a variety of datasets for research and development. In this\nsection, we will show how to convert the SNAP datasets to GraphAr\nformat, showcasing the process with the\n",(0,n.jsx)(a.a,{href:"https://snap.stanford.edu/data/ego-Facebook.html",children:"ego-Facebook"})," graph\nas a case study. The conversion leverages GraphInfo constructors and the\nhigh-level writer functions from the C++ library."]}),"\n",(0,n.jsx)(a.h2,{id:"prepare-the-snap-dataset",children:"Prepare the SNAP Dataset"}),"\n",(0,n.jsx)(a.p,{children:"Before converting, download the ego-Facebook dataset from the SNAP\nwebsite. The dataset is a text file with each line representing an edge\nin the graph."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"cd /path/to/your/dataset\nwget https://snap.stanford.edu/data/facebook_combined.txt.gz\ngunzip facebook_combined.txt.gz\n"})}),"\n",(0,n.jsx)(a.h2,{id:"convert-the-snap-dataset-to-graphar-format",children:"Convert the SNAP Dataset to GraphAr Format"}),"\n",(0,n.jsx)(a.p,{children:"The initial phase involves constructing VertexInfo, EdgeInfo, and\nGraphInfo objects, which are subsequently serialized into YAML files.\nFor instance, the code snippet below illustrates the creation and\nstorage of the vertex information file."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:'auto version = graphar::InfoVersion::Parse("gar/v1").value();\n\n// meta info\nstd::string vertex_type = "node", vertex_prefix = "vertex/node/";\n\n// create vertex info\nauto vertex_info = graphar::CreateVertexInfo(\n    vertex_type, VERTEX_CHUNK_SIZE, {}, vertex_prefix, version);\n\n// save & dump vertex info\nASSERT(!vertex_info->Dump().has_error());\nASSERT(vertex_info->Save(save_path + "node.vertex.yml").ok());\n\n// create and save edge info file ...\nauto edge_info = ...\nASSERT(!edge_info->Dump().has_error());\nASSERT(edge_info->Save(save_path + "node_links_node.edge.yml").ok());\n\n// create and save graph info file ...\nauto graph_info = ...\nASSERT(!graph_info->Dump().has_error());\nASSERT(graph_info->Save(save_path + graph_name + ".graph.yml").ok());\n'})}),"\n",(0,n.jsx)(a.p,{children:"Subsequently, we employ the high-level vertex and edge builders provided\nby the GraphAr C++ library to generate payload data files with vertex\nand edge data. The code snippet that follows demonstrates the generation\nand preservation of the edge data file."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"// construct edges builder\nauto e_builder = graphar::builder::EdgesBuilder::Make(\n                     edge_info, save_path, ADJLIST_TYPE, VERTEX_COUNT)\n                     .value();\n// read edge data from file\nstd::ifstream file(DATA_PATH);\nstd::string line;\nwhile (std::getline(file, line)) {\n  std::istringstream iss(line);\n  // skip comments\n  if (line[0] == '#') {\n    continue;\n  }\n  int src, dst;\n  if (!(iss >> src >> dst)) {\n    break;\n  }\n  graphar::builder::Edge e(src, dst);\n  ASSERT(e_builder->AddEdge(e).ok());\n}\n\n// dump & clear\nASSERT(e_builder->Dump().ok());\ne_builder->Clear();\n"})}),"\n",(0,n.jsxs)(a.p,{children:["For comprehensive insights into this example, please consult the\naccompanying ",(0,n.jsx)(a.a,{href:"https://github.com/apache/incubator-graphar/tree/main/cpp/examples/snap_dataset_to_graphar.cc",children:"source\ncode"}),"\n."]})]})}function c(e={}){const{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},395:(e,a,t)=>{t.d(a,{Z:()=>i,a:()=>o});var n=t(959);const r={},s=n.createContext(r);function o(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);
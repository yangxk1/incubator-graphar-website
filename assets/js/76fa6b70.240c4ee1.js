"use strict";(self.webpackChunkapache_website_template=self.webpackChunkapache_website_template||[]).push([[3293],{7601:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(1527),a=r(395);const i={id:"getting-started",title:"Getting Started",sidebar_position:1},s="Getting Started",o={id:"libraries/cpp/getting-started",title:"Getting Started",description:"This article is a quick guide that explains how to work with GraphAr",source:"@site/docs/libraries/cpp/getting-started.md",sourceDirName:"libraries/cpp",slug:"/libraries/cpp/getting-started",permalink:"/docs/libraries/cpp/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/incubator-graphar/edit/main/docs/libraries/cpp/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"getting-started",title:"Getting Started",sidebar_position:1},sidebar:"documentation",previous:{title:"C++ Library",permalink:"/docs/category/c-library"},next:{title:"Examples",permalink:"/docs/category/examples"}},d={},l=[{value:"Information Files",id:"information-files",level:2},{value:"Graph information",id:"graph-information",level:3},{value:"Vertex information",id:"vertex-information",level:3},{value:"Edge information",id:"edge-information",level:3},{value:"Data Files",id:"data-files",level:2},{value:"Property data",id:"property-data",level:3},{value:"AdjList data",id:"adjlist-data",level:3},{value:"How to Use GraphAr",id:"how-to-use-graphar",level:2},{value:"Construct information",id:"construct-information",level:3},{value:"Read GraphAr format files",id:"read-graphar-format-files",level:3},{value:"Write GraphAr format files",id:"write-graphar-format-files",level:3},{value:"A PageRank Example",id:"a-pagerank-example",level:3},{value:"Processing Graph Data with Labels",id:"processing-graph-data-with-labels",level:3},{value:"Using Label Filtering Functions",id:"using-label-filtering-functions",level:3},{value:"Working with Cloud Storage (S3, OSS)",id:"working-with-cloud-storage-s3-oss",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,n.jsxs)(t.p,{children:["This article is a quick guide that explains how to work with GraphAr\nC++. To begin with, please refer to the ",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar/blob/main/README.md#building-libraries",children:"Building\nSteps"}),"\nto install GraphAr."]}),"\n",(0,n.jsx)(t.h2,{id:"information-files",children:"Information Files"}),"\n",(0,n.jsx)(t.p,{children:"GraphAr uses a group of Yaml files to save the meta information for a graph."}),"\n",(0,n.jsx)(t.h3,{id:"graph-information",children:"Graph information"}),"\n",(0,n.jsx)(t.p,{children:'The graph information file defines the most basic information of a graph\nincludes its name, the root directory path of the data files, the vertex\ninformation and edge information files it contains, and the version of\nGraphAr. For example, the file "ldbc_sample.graph.yml" defines an\nexample graph named "ldbc_sample", which includes one type of vertices\n("person") and one type of edges ("person knows person").'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"name: ldbc_sample\nprefix: ./\nvertices:\n  - person.vertex.yml\nedges:\n  - person_knows_person.edge.yml\nversion: gar/v1\n"})}),"\n",(0,n.jsx)(t.h3,{id:"vertex-information",children:"Vertex information"}),"\n",(0,n.jsx)(t.p,{children:'Each vertex information file defines a single group of vertices with the\nsame vertex label, e.g., "person" in this case. The vertex chunk size,\nthe relative path for vertex data files and the version of GraphAr are\nspecified. These vertices could have some properties, which are divided\ninto property groups. Each property group has its own file type (CSV,\nORC or Parquet) and the prefix of the relative path for its data files,\nit also lists all properties in this group, with every property contains\nthe name, data type and if it is the primary key.'}),"\n",(0,n.jsxs)(t.p,{children:["The file\n",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar-testing/blob/main/ldbc_sample/csv/person.vertex.yml",children:"person.vertex.yml"}),'\nlocated inside the test data contains an example of the vertex\ninformation file. In this example, the "person" vertices have two\nproperty groups. The first group contains only one property (named "id")\nand the second group contains three properties ("firstName", "lastName"\nand "gender").']}),"\n",(0,n.jsx)(t.h3,{id:"edge-information",children:"Edge information"}),"\n",(0,n.jsxs)(t.p,{children:['Each edge information file defines a single type of edges with specific\nlabels for the source vertex, destination vertex and the edge, e.g.,\n"person_knows_person" in this case. It defines the meta information such\nas the edge chunk size, the source vertex chunk size, the destination\nvertex chunk size, if the edges are directed or not, the relative file\npath for edge data files, the adjLists and the version of GraphAr. The\nfile\n',(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar-testing/blob/main/ldbc_sample/csv/person_knows_person.edge.yml",children:"person_knows_person.edge.yml"}),"\nlocated inside the test data contains an example of the edge information\nfile."]}),"\n",(0,n.jsxs)(t.p,{children:["In GraphAr format, separate data files are used to store the structure\n(called adjList) and the properties for edges. The adjList type can be\neither of ",(0,n.jsx)(t.strong,{children:"unordered_by_source"}),", ",(0,n.jsx)(t.strong,{children:"unordered_by_dest"}),",\n",(0,n.jsx)(t.strong,{children:"ordered_by_source"})," or ",(0,n.jsx)(t.strong,{children:"ordered_by_dest"}),". For a specific\ntype of adjList, the meta information includes its file path prefix, the\nfile type, as well as all the property groups attached."]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:"It is allowed to store different types of adjLists for a group of\nedges at the same time."})}),"\n",(0,n.jsx)(t.h2,{id:"data-files",children:"Data Files"}),"\n",(0,n.jsx)(t.h3,{id:"property-data",children:"Property data"}),"\n",(0,n.jsxs)(t.p,{children:['The vertex properties are stored in vertex property chunks with the\nchunk size specified by the vertex information file. Different property\ngroups correspond to individual groups of data files. In our example,\nthe property group ("first name", "last name", "gender") for vertex\nchunk 0 of "person" vertices are stored in\n',(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar-testing/blob/main/ldbc_sample/csv/vertex/person/firstName_lastName_gender/chunk0",children:"./vertex/person/firstName_lastName_gender/chunk0"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["In practice of graph processing, it is common to only query a subset of\ncolumns of the properties. Thus, the column-oriented formats like Apache\nORC and Apache Parquet are more efficient, which eliminate the need to\nread columns that are not relevant. We also provide data files in ORC\nand Parquet for the example graph in the ",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar-testing/blob/main/ldbc_sample/",children:"test\ndata"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Similar with vertices, the edge properties are stored in edge property\nchunks. For each vertex chunk, its associated edges (if the edge type is\n",(0,n.jsx)(t.strong,{children:"ordered_by_source"})," or ",(0,n.jsx)(t.strong,{children:"unordered_by_source"}),", the associated edges\nare those in which the source vertex is in that chunk; otherwise, if the\nedge type is ",(0,n.jsx)(t.strong,{children:"ordered_by_dest"})," or ",(0,n.jsx)(t.strong,{children:"unordered_by_dest"}),", the\nassociated edges are those in which the destination is in that chunk)\nare maintained in some edge chunks, with the size of each chunk not\nexceeding the edge chunk size specified in the edge information file."]}),"\n",(0,n.jsxs)(t.p,{children:["For instance, the file\n",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar-testing/blob/main/ldbc_sample/csv/edge/person_knows_person/ordered_by_source/creationDate/part0/chunk0",children:"./edge/person_knows_person/ordered_by_source/creationDate/part0/chunk0"}),'\nstores the property group "creationDate" of "person_knows_person" edges\nfor the first edge chunk of the first vertex chunk, and the adjList type\nof the edges is ',(0,n.jsx)(t.strong,{children:"ordered_by_source"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"adjlist-data",children:"AdjList data"}),"\n",(0,n.jsxs)(t.p,{children:["The adjList in GraphAr describes the topology structure, i.e., the internal\nid of the source vertex and the destination vertex for each of a group\nof edges. As explained in ",(0,n.jsx)(t.a,{href:"https://graphar.apache.org/docs/specification/format#edge-chunks-in-graphar",children:"Edges in GraphAr"}),", the edges are separated\ninto edge chunks, and each edge chunk has its own adjList table and 0 or\nmore property tables."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, the file\n",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar-testing/blob/main/ldbc_sample/csv/edge/person_knows_person/ordered_by_source/adj_list/part0/chunk0",children:"./edge/person_knows_person/ordered_by_source/adj_list/part0/chunk0"}),'\nsaves the adjList of "person_knows_person" edges for the first edge\nchunk of the first vertex chunk, and the adjList type of the edges is\n"ordered_by_source". This adjList table consists of only two columns:\none for the source and one for the destination; it can be saved in CSV,\nORC, or Parquet files.']}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["If the edges are ordered, there may also be offset chunks to construct\nthe index for accessing edges of a single vertex. These chunks will\ntore the start offset of each vertex's edges, see\n",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar-testing/blob/main/ldbc_sample/csv/edge/person_knows_person/ordered_by_source/offset/chunk0",children:"./edge/person_knows_person/ordered_by_source/offset/chunk0"}),"\nas an example."]})}),"\n",(0,n.jsx)(t.h2,{id:"how-to-use-graphar",children:"How to Use GraphAr"}),"\n",(0,n.jsx)(t.h3,{id:"construct-information",children:"Construct information"}),"\n",(0,n.jsxs)(t.p,{children:["It is convenient to construct the graphar metadata and dump it to generate\ninformation files. We provide an ",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar/blob/main/cpp/examples/construct_info_example.cc",children:"example\nprogram"}),"\nlocated in the source code which shows how to construct and dump the\nfiles for graph information, vertex information and edge information."]}),"\n",(0,n.jsx)(t.p,{children:"Also, the metadata of a graph can be constructed easily through reading\nthe already existed information files, as the following code\nillustrates:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'// construct graph information from file\nstd::string path = ... // the path of the graph information file (e.g., ldbc_sample.graph.yml)\nauto graph_info = graphar::GraphInfo::Load(path).value();\n\n// get vertex information\nauto vertex_info = graph_info->GetVertexInfo("person");\nif (vertex_info != nullptr) {\n  // use vertex_info ...\n}\n\n// get edge information\nauto edge_info = graph_info->GetEdgeInfo("person", "knows", "person");\nif (edge_info != nullptr) {\n  // use edge_info ...\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"read-graphar-format-files",children:"Read GraphAr format files"}),"\n",(0,n.jsx)(t.p,{children:"GraphAr supports the flexible reading of graph data, e.g., allowing to read\ndata of a single vertex, a vertex chunk, or all vertices with a specific\nlabel. In addition, necessary property groups can be selected to read\nand avoid reading all properties from the files. Furthermore, GraphAr\nprovides convenient and flexible access to adjList, offset and property\nchunks for edges."}),"\n",(0,n.jsx)(t.p,{children:'As a simple case, the following example shows how to read all vertices\nwith label "person" of the graph defined by "graph_info" and output the\nvalues of "id" and "firstName" for each vertex.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'graph_info = ...\nauto vertices = graphar::VerticesCollection::Make(graph_info, "person").value();\n\nfor (auto it = vertices->begin(); it != vertices->end(); ++it) {\n  // get a vertex and access its data\n  auto vertex = *it;\n  if (vertex.IsValid("id") && vertex.IsValid("firstName"))\n    std::cout << "id=" << vertex.property<int64_t>("id").value() << ", firstName=" << vertex.property<std::string>("firstName").value() << std::endl;\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:'The next example reads all edges with label "person_knows_person" from\nthe above graph and outputs the end vertices for each edge.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'graph_info = ...\nauto expect = graphar::EdgesCollection::Make(graph_info, "person", "knows", "person", graphar::AdjListType::ordered_by_source);\nauto edges = expect.value();\n\nfor (auto it = edges->begin(); it != edges->end(); ++it) {\n  // get an edge and access its data\n  auto edge = *it;\n  std::cout << "src=" << edge.source() << ", dst=" << edge.destination() << std::endl;\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"write-graphar-format-files",children:"Write GraphAr format files"}),"\n",(0,n.jsx)(t.p,{children:"As same with the readers, the GraphAr writers provide different-level\nmethods to output the graph data in memory into GraphAr format files."}),"\n",(0,n.jsxs)(t.p,{children:["As the simplest cases, the fist example below adds vertices to\n",(0,n.jsx)(t.strong,{children:"VerticesBuilder"}),", and then dumps the data to files; the second\nexample constructs a collection of edges and then dumps them."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'vertex_info = ...\nprefix = ...\ngraphar::builder::VerticesBuilder builder(vertex_info,  prefix);\n\n// add a vertex\ngraphar::builder::Vertex v;\nv.AddProperty("id", 933);\nv.AddProperty("firstName", "Alice");\nbuilder.AddVertex(v);\n// add other vertices\n// ...\n\n// write to GraphAr format files\nbuilder.Dump();\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'edge_info = ...\nprefix = ...\nvertices_num = ...\ngraphar::builder::EdgesBuilder builder(edge_info, prefix, graphar::AdjListType::ordered_by_source, vertices_num);\n\n// add an edge (0 -> 3)\ngraphar::builder::Edge e(0, 3);\ne.AddProperty("creationDate", "2011-07-20T20:02:04.233+0000");\nbuilder.AddEdge(e);\n// add other edges\n// ...\n\n// write to GraphAr format files\nbuilder.Dump();\n'})}),"\n",(0,n.jsx)(t.h3,{id:"a-pagerank-example",children:"A PageRank Example"}),"\n",(0,n.jsxs)(t.p,{children:["Here we will go through an example of out-of-core graph analytic\nalgorithms based on GraphAr which calculates the PageRank. Please look\n",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/PageRank",children:"here"})," if you want a detailed\nexplanation of the PageRank algorithm. And the source code can be found\nat\n",(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar/blob/main/cpp/examples/pagerank_example.cc",children:"pagerank_example.cc"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:['This program first reads in the graph information file to obtain the\nmetadata; then, it constructs the vertex and edge collections to enable\naccess to the graph. After that, an implementation of the PageRank\nalgorithm is provided, with data for the vertices stored in memory, and\nthe edges streamed through disk I/O. Finally, the vertex information\nwith type "person" is extended to include a new property named\n"pagerank" (a new vertex information file named\n',(0,n.jsx)(t.em,{children:"person-new-pagerank.vertex.yml"})," is saved) and the ",(0,n.jsx)(t.strong,{children:"VerticesBuilder"}),"\nis used to write the results to new generated data chunks."]}),"\n",(0,n.jsxs)(t.p,{children:["Please refer to ",(0,n.jsx)(t.a,{href:"/docs/libraries/cpp/examples/out-of-core",children:"more examples"})," to learn\nabout the other available case studies utilizing GraphAr."]}),"\n",(0,n.jsx)(t.h3,{id:"processing-graph-data-with-labels",children:"Processing Graph Data with Labels"}),"\n",(0,n.jsxs)(t.p,{children:["As GraphAr supports LPG data, users can add labels for vertices and use related label filtering functions to obtain specified vertices.\nThe standard csv format of graph data with labels supported by GraphAr is ",(0,n.jsx)(t.code,{children:"id|:LABEL|property_1|property_2"}),", if a vertex has multiple labels, use ; to separate them. Here is an example."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csv",children:"id|:LABEL|name|url\n0|company;public|Kam_Air|http://dbpedia.org/resource/Kam_Air\n1|company|Balkh_Airlines|http://dbpedia.org/resource/Balkh_Airlines\n2|company|Khyber_Afghan_Airlines|http://dbpedia.org/resource/Khyber_Afghan_Airlines\n...\n1575|university|Paktia_University|http://dbpedia.org/resource/Paktia_University\n"})}),"\n",(0,n.jsxs)(t.p,{children:["At the beginning, we need to add label information into the ",(0,n.jsx)(t.code,{children:"yml"})," file of  vertex. For this example, it should be as follows."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yml",children:"# organisation.vertex.yml\n\ntype: organisation\nchunk_size: 4096\nprefix: vertex/organisation/\n# add the label infos\nlabels:\n  - university\n  - company\n  - public\nproperty_groups:\n  - file_type: parquet\n    properties:\n      - name: name\n        data_type: string\n        is_primary: false\n      - name: url\n        data_type: string\n        is_primary: false\n      - name: id\n        data_type: int64\n        is_primary: true\nversion: gar/v1\n\n"})}),"\n",(0,n.jsxs)(t.p,{children:["When you have the data ready, you can read the file into ",(0,n.jsx)(t.code,{children:"arrow::Table"})," by using arrow I/O function."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"    arrow::csv::ReadOptions read_options{}; \n    arrow::csv::ParseOptions parse_options{}; \n    arrow::csv::ConvertOptions convert_options{};\n\n    parse_options.delimiter = '|'; \n\n    auto input = arrow::io::ReadableFile::Open(test_data_dir + \"/ldbc/organisation_0_0.csv\", arrow::default_memory_pool()).ValueOrDie();\n\n    auto reader = arrow::csv::TableReader::Make(\n        arrow::io::default_io_context(),\n        input,\n        read_options,\n        parse_options,\n        convert_options).ValueOrDie();\n\n    std::shared_ptr<arrow::Table> table;\n    table = reader->Read().ValueOrDie();\n"})}),"\n",(0,n.jsx)(t.p,{children:"You can export label table to disk in parquet format, and read it back into memory in the following way."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'  auto options_parquet_builder = WriterOptions::ParquetOptionBuilder();\n  options_parquet_builder.compression(arrow::Compression::type::UNCOMPRESSED);\n  // write arrow table as parquet chunk\n  auto maybe_writer =\n      VertexPropertyWriter::Make(vertex_info, test_data_dir + "/ldbc/parquet/", options_parquet_builder.build());\n  REQUIRE(!maybe_writer.has_error());\n  auto writer = maybe_writer.value();\n  REQUIRE(writer->WriteTable(table, 0).ok());\n  REQUIRE(writer->WriteVerticesNum(table->num_rows()).ok());\n\n  // read parquet chunk as arrow table\n  auto maybe_reader =\n      VertexPropertyArrowChunkReader::MakeForLabels(graph_info, "organisation", labels, SelectType::LABELS);\n  assert(maybe_reader.status().ok());\n  auto reader = maybe_reader.value();\n  assert(reader->seek(0).ok());\n  assert(reader->GetLabelChunk().status().ok());\n  assert(reader->next_chunk().ok());\n'})}),"\n",(0,n.jsx)(t.h3,{id:"using-label-filtering-functions",children:"Using Label Filtering Functions"}),"\n",(0,n.jsxs)(t.p,{children:["By calling the ",(0,n.jsx)(t.code,{children:"graphar::VerticesCollection::verticesWithLabel"})," or ",(0,n.jsx)(t.code,{children:"graphar::VerticesCollection::verticesWithMultipleLabels"})," API, we can specify a certain type of vertices on a certain graph, then filter out all vertices that match one or more labels. Here we introduce several examples of using label filtering."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'  graph_info = ...\n  auto vertex_info = graph_info->GetVertexInfo("organisation");\n  auto labels = vertex_info->GetLabels();\n\n  // query vertices with a specific label\n  auto maybe_filter_vertices_collection =\n      graphar::VerticesCollection::verticesWithLabel(std::string("company"), graph_info, type);\n  ASSERT(!maybe_filter_vertices_collection.has_error());\n  auto filter_vertices = maybe_filter_vertices_collection.value();\n  \n  // iterate vertices with label "company"\n  for (auto it = filter_vertices->begin(); it != filter_vertices->end();\n       ++it) {\n    // get a node\'s all labels\n    auto label_result = it.label();\n    std::cout << "id: " << it.id() << " ";\n    if (!label_result.has_error()) {\n      for (auto label : label_result.value()) {\n        std::cout << label << " ";\n      }\n    }\n    // ...\n  }\n\n  // query vertices based on a query result\n  auto maybe_filter_vertices_collection =\n      graphar::VerticesCollection::verticesWithLabel(std::string("public"),\n                                                     filter_vertices);\n\n  // query vertices with multi labels\n  auto maybe_filter_vertices_collection =\n    graphar::VerticesCollection::verticesWithMultipleLabels({"company", "public"}, graph_info, type);\n  // ...\n\n \n'})}),"\n",(0,n.jsx)(t.p,{children:"Notice that, if the first two queries are executed successively, the result is equivalent to the third query."}),"\n",(0,n.jsx)(t.h3,{id:"working-with-cloud-storage-s3-oss",children:"Working with Cloud Storage (S3, OSS)"}),"\n",(0,n.jsx)(t.p,{children:"GraphAr supports reading and writing data from and to cloud storage, including\nAWS S3 and Alibaba Cloud OSS."}),"\n",(0,n.jsxs)(t.p,{children:['To read data from cloud storage, you can specify the path of the data files\nwith URI schema, e.g., "s3://bucket-name/path/to/data" or "s3://[access-key',":secret-key",']@bucket-name/path/to/data".']}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/apache/incubator-graphar/blob/main/cpp/test/test_info.cc#L777-L792",children:"Code example"})," demonstrates how to read data from S3."]}),"\n",(0,n.jsxs)(t.p,{children:["Note that once you use cloud storage, you need to call ",(0,n.jsx)(t.code,{children:"graphar::InitializeS3"})," to initialize S3 APIs before starting the work and call",(0,n.jsx)(t.code,{children:"graphar::FinalizeS3()"})," to shut down the APIs after the work finish."]})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},395:(e,t,r)=>{r.d(t,{Z:()=>o,a:()=>s});var n=r(959);const a={},i=n.createContext(a);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);